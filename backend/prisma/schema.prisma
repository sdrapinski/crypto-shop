// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// basic
model Region {
  region_id String @id @default(uuid())
  country String
  city String
  street String
  postCode String
  user Users @relation(fields: [user_id],references: [user_id])
  user_id String @unique
}

model Products_category{
  product_category_id Int @id @default(autoincrement())
  product_category_name String
  products Products[]
}

//main
model Users {
user_id String @id @default(uuid())
user_products Products[] @relation("ProductCreatedBy")
user_region Region?
user_name String
user_surname String
user_email String
user_date_of_birth DateTime
user_phone_number String
user_login String
user_password String
user_join_date DateTime @default(now())
user_avatar_url String?
user_premium_tokens Float?
user_cart Cart?
user_watched_products Products[] @relation("WatchedProducts")
user_products_purchased ProductsSold[]
user_messages_send Message[] @relation("sender")
user_messages_recived Message[] @relation("recipient")
user_notifications Notification[]
user_wallets CryptoWallet[]

}

model Delivers {
id String @id @default(uuid())
user_id String
city String
street String
houseNumber Int
postcode String
phoneNumber Int
email String
delivery String
status Int
}

model Suppliers{
id String @id @default(uuid())
name String
delivery_price
}

model Products {
  product_id   String   @id @default(uuid())
  user_id String
  user Users @relation("ProductCreatedBy",fields: [user_id], references: [user_id])
  products_category_id Int
  products_category Products_category @relation(fields: [products_category_id], references: [product_category_id])
  product_name         String
  product_description  String? @db.VarChar(1000)
  product_images        Json
  product_dollar_price Float
  product_quantity Int
  cartToItem_id CartToItem[]
  product_watchedBy Users @relation("WatchedProducts", fields: [product_watched_by_id], references: [user_id])
  product_watched_by_id String
  product_sold ProductsSold[]
  product_popularity Float?
  product_added_time DateTime @default(now())
  product_promotion DateTime?
  product_used Boolean
  product_messages Message[]
  product_notifications Notification[]
  product_crypto Boolean


}

model CryptoWallet {
  wallet_id String @id @default(uuid())
  wallet_address String
  wallet_status String @default("Inactive")
  wallet_ETH_balance Float @default(0)
  user_id String
  user Users @relation(fields: [user_id], references: [user_id])
}

model Cart {
  cart_id String @id @default(uuid())
  cartItems CartToItem[] 
  user_id String @unique
  user Users @relation(fields: [user_id], references: [user_id])
}
model CartToItem {  
  cart_item_id String @id @default(uuid())
  cart_id String
  product_id String
  product Products @relation(fields: [product_id], references: [product_id])
  cart Cart @relation(fields: [cart_id], references: [cart_id])
  quantity Int
}

model ProductsSold{
  product_sold_id String @id @default(uuid())
  user_id String
  product_id String
  product Products @relation(fields: [product_id], references: [product_id])
  user Users @relation(fields: [user_id], references: [user_id])
  sale_time DateTime
  deliveryStatus String
  deliveryOption String
}

model Message {
  message_id String @id @default(uuid())
  sender_id String
  sender Users @relation("sender",fields: [sender_id], references: [user_id])
  recipient_id String
  recipient Users @relation("recipient",fields: [recipient_id], references: [user_id])
  product_id String
  product Products @relation(fields: [product_id], references: [product_id])
  content String
  sent_time DateTime @default(now())
  is_read Boolean @default(false)
}

model Notification {
  notification_id String @id @default(uuid())
  user_id String
  user Users? @relation(fields: [user_id], references: [user_id])
  product_id String?
  product Products? @relation(fields: [product_id], references: [product_id])
  content String
  created_at DateTime @default(now())
  is_read Boolean @default(false)
}

model GlobalNotification {
  global_notification_id String @id @default(uuid())
  content String
  created_at DateTime @default(now())
}
