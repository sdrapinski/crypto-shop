package com.cbwrapper

import com.facebook.react.bridge.*
import com.payu.custombrowser.Bank
import com.payu.custombrowser.CustomBrowser
import com.payu.custombrowser.util.CBConstant


class CBWrapperModule(private val reactContext: ReactApplicationContext) :
    ReactContextBaseJavaModule(reactContext) {

    override fun getName(): String {
        return "CBWrapper"
    }


    @ReactMethod
    fun openCB(
        payuPaymentParams: ReadableMap,
        errorCallback: Callback,
        successCallback: Callback
    ) {
        if (payuPaymentParams == null || !payuPaymentParams.hasKey(CBConstant.PAYU_PAYMENT_PARAMS)) {
            errorCallback(CBConstant.errorMessages.MANDATORY_PARAM_PREFIX + CBConstant.PAYU_PAYMENT_PARAMS + CBConstant.errorMessages.IS_MISSING_POSTFIX)
            return
        }
        try {
            val map = payuPaymentParams.getMap(CBConstant.PAYU_PAYMENT_PARAMS)?.toHashMap()
            map?.let {
                it[CBConstant.REACT_VERSION] = BuildConfig.REACT_VERSION_NAME
                it[CBConstant.SDK_VERSION_NAME] = BuildConfig.VERSION_NAME
                if (it.containsKey(CBConstant.CB_CONFIG) && it[CBConstant.CB_CONFIG] is HashMap<*, *>
                    && ((it[CBConstant.CB_CONFIG] as HashMap<String, Any>)[CBConstant.URL] as String).startsWith(
                        CBConstant.PAYU_DOMAIN_TEST
                    )
                ) {
                    Bank.DEBUG = true
                }
            }

            CustomBrowser().addCustomBrowser(
                reactContext.currentActivity,
                map,
                CBCallbacks(reactContext)
            )
            successCallback(CBConstant.errorMessages.PAYMENT_INITIATED)

        } catch (e: Exception) {
            errorCallback(e.message)
        }
    }


}




