package com.cbwrapper

import android.app.AlertDialog
import com.facebook.react.bridge.Arguments
import com.facebook.react.bridge.ReactContext
import com.facebook.react.bridge.WritableMap
import com.facebook.react.modules.core.DeviceEventManagerModule
import com.payu.custombrowser.PayUCustomBrowserCallback
import com.payu.custombrowser.util.CBConstant

class CBCallbacks(var reactContext: ReactContext) : PayUCustomBrowserCallback() {
 private var isCallBackSent = false
    override fun onPaymentFailure(payuResult: String?, merchantResponse: String?) {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_PAYMENT_FAILURE)
        params.putString(CBConstant.PAYU_RESULT, payuResult)
        params.putString(CBConstant.MERCHANT_RESPONSE, merchantResponse)
        emit(params)
        isCallBackSent = true
    }

    override fun onPaymentTerminate() {
            if (!isCallBackSent) {
            val params = Arguments.createMap()
            params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_PAYMENT_TERMINATED)
            emit(params) 
            isCallBackSent = true
            } 
    }

    override fun onPaymentSuccess(payuResult: String?, merchantResponse: String?) {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_PAYMENT_SUCCESS)
        params.putString(CBConstant.PAYU_RESULT, payuResult)
        params.putString(CBConstant.MERCHANT_RESPONSE, merchantResponse)
        emit(params)
        isCallBackSent = true
    }

    override fun onCBErrorReceived(code: Int, errormsg: String?) {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_CBERROR_RECEIVED)
        params.putString(CBConstant.ERROR_CODE, "$code")
        params.putString(CBConstant.ERROR_MESSAGE, errormsg)
        emit(params)
        isCallBackSent = true
    }

    override fun onBackButton(alertDialogBuilder: AlertDialog.Builder?) {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_BACK_BUTTON)
        emit(params)
    }

    override fun onBackApprove() {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_BACK_APPROVE)
        emit(params)
    }

    override fun onBackDismiss() {
        val params = Arguments.createMap()
        params.putString(CBConstant.EVENT_TYPE, CBConstant.ON_BACK_DISMISS)
        emit(params)
    }

    private fun emit(params: WritableMap?) {
        val emitter = reactContext
            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
        emitter.emit(CBConstant.CB_LISTENER, params)
    }
}